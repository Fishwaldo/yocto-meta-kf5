commit 78eff35256ebe1d5edc4acf6f0e389eb4c7256c3
Author: Volker Krause <vkrause@kde.org>
Date:   Thu Aug 10 19:22:05 2017 +0200

    Allow to only build the kauth-policy-gen code generator
    
    Summary:
    This is primarily useful for cross-compilation, where e.g. with Yocto
    neither Qt5Widgets nor PolicyKit are easily available for the host build.
    
    Reviewers: #frameworks, cordlandwehr
    
    Tags: #frameworks
    
    Differential Revision: https://phabricator.kde.org/D7274

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f822c89..859b2d9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,11 @@ feature_summary(WHAT REQUIRED_PACKAGES_NOT_FOUND FATAL_ON_MISSING_REQUIRED_PACKA
 set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${ECM_KDE_MODULE_DIR})
 
 set(REQUIRED_QT_VERSION 5.7.0)
-find_package(Qt5 ${REQUIRED_QT_VERSION} CONFIG REQUIRED Widgets DBus)
+find_package(Qt5 ${REQUIRED_QT_VERSION} CONFIG REQUIRED DBus)
+option(KAUTH_BUILD_CODEGENERATOR_ONLY "Only build the kauth-policy-gen code generator." OFF)
+if(NOT KAUTH_BUILD_CODEGENERATOR_ONLY)
+    find_package(Qt5 ${REQUIRED_QT_VERSION} CONFIG REQUIRED Widgets)
+endif()
 include(KDEInstallDirs)
 include(KDEFrameworkCompilerSettings NO_POLICY_SCOPE)
 include(KDECMakeSettings)
@@ -50,8 +54,10 @@ if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/po")
 endif()
 
 add_subdirectory(src)
-add_subdirectory(autotests)
-add_subdirectory(examples)
+if(TARGET Qt5::Widgets)
+    add_subdirectory(autotests)
+    add_subdirectory(examples)
+endif()
 
 # create a Config.cmake and a ConfigVersion.cmake file and install them
 set(CMAKECONFIG_INSTALL_DIR "${KDE_INSTALL_CMAKEPACKAGEDIR}/KF5Auth")
@@ -82,8 +88,10 @@ install(FILES  "${CMAKE_CURRENT_BINARY_DIR}/KF5AuthConfig.cmake"
         COMPONENT Devel )
 
 
-install(EXPORT KF5AuthTargets DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
+if(TARGET KF5Auth)
+    install(EXPORT KF5AuthTargets DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
         FILE KF5AuthTargets.cmake NAMESPACE KF5:: COMPONENT Devel)
+endif()
 
 if(NOT "${KAUTH_BACKEND_NAME}" STREQUAL "FAKE")
     install(EXPORT KF5AuthToolsTargets DESTINATION "${CMAKECONFIG_INSTALL_DIR}"
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 662a0dd..a0aa965 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,3 @@
-
-find_package(Qt5 ${REQUIRED_QT_VERSION} CONFIG REQUIRED Widgets DBus)
-
 # This file handles all the logic for compiling KAuth's backends
 include(ConfigureChecks.cmake)
 
@@ -9,45 +6,54 @@ configure_file(BackendsConfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/BackendsConfig
 
 ecm_create_qm_loader(KAuth_QM_LOADER kauth5_qt)
 
-set(libkauth_SRCS
-    kauthaction.cpp
-    kauthactionreply.cpp
-    kauthexecutejob.cpp
-    kauthobjectdecorator.cpp
-    AuthBackend.cpp
-    BackendsManager.cpp
-    HelperProxy.cpp
-    kauthhelpersupport.cpp
-    kauthdebug.cpp
-    backends/fake/FakeBackend.cpp
-    backends/fakehelper/FakeHelperProxy.cpp
-    ${KAuth_QM_LOADER}
-)
-
-add_library(KF5Auth ${libkauth_SRCS})
-generate_export_header(KF5Auth BASE_NAME KAuth)
-add_library(KF5::Auth ALIAS KF5Auth)
-
-target_include_directories(KF5Auth INTERFACE "$<INSTALL_INTERFACE:${KDE_INSTALL_INCLUDEDIR_KF5}/KAuth>")
-
-target_link_libraries(KF5Auth PUBLIC Qt5::Core KF5::CoreAddons)  # for KJob
-target_link_libraries(KF5Auth PRIVATE Qt5::Widgets Qt5::DBus)
-set_target_properties(KF5Auth PROPERTIES VERSION   ${KAUTH_VERSION_STRING}
-                                         SOVERSION ${KAUTH_SOVERSION}
-                                         EXPORT_NAME Auth
-)
-
-ecm_generate_headers(KAuth_HEADERS
-  HEADER_NAMES
-  KAuth
-  KAuthHelperSupport
-  KAuthAction
-  KAuthActionReply
-  KAuthExecuteJob
-  KAuthObjectDecorator
-
-  REQUIRED_HEADERS KAuth_HEADERS
-)
+if(TARGET Qt5::Widgets)
+    set(libkauth_SRCS
+        kauthaction.cpp
+        kauthactionreply.cpp
+        kauthexecutejob.cpp
+        kauthobjectdecorator.cpp
+        AuthBackend.cpp
+        BackendsManager.cpp
+        HelperProxy.cpp
+        kauthhelpersupport.cpp
+        kauthdebug.cpp
+        backends/fake/FakeBackend.cpp
+        backends/fakehelper/FakeHelperProxy.cpp
+        ${KAuth_QM_LOADER}
+    )
+
+    add_library(KF5Auth ${libkauth_SRCS})
+    generate_export_header(KF5Auth BASE_NAME KAuth)
+    add_library(KF5::Auth ALIAS KF5Auth)
+
+    target_include_directories(KF5Auth INTERFACE "$<INSTALL_INTERFACE:${KDE_INSTALL_INCLUDEDIR_KF5}/KAuth>")
+
+    target_link_libraries(KF5Auth PUBLIC Qt5::Core KF5::CoreAddons)  # for KJob
+    target_link_libraries(KF5Auth PRIVATE Qt5::Widgets Qt5::DBus)
+    set_target_properties(KF5Auth PROPERTIES VERSION   ${KAUTH_VERSION_STRING}
+                                            SOVERSION ${KAUTH_SOVERSION}
+                                            EXPORT_NAME Auth
+    )
+
+    ecm_generate_headers(KAuth_HEADERS
+        HEADER_NAMES
+        KAuth
+        KAuthHelperSupport
+        KAuthAction
+        KAuthActionReply
+        KAuthExecuteJob
+        KAuthObjectDecorator
+
+        REQUIRED_HEADERS KAuth_HEADERS
+    )
+
+    install(TARGETS KF5Auth EXPORT KF5AuthTargets ${KF5_INSTALL_TARGETS_DEFAULT_ARGS})
+    install(FILES
+        ${CMAKE_CURRENT_BINARY_DIR}/kauth_export.h
+        ${KAuth_HEADERS}
+        DESTINATION ${KDE_INSTALL_INCLUDEDIR_KF5}/KAuth COMPONENT Devel
+    )
+endif()
 
 find_package(PythonModuleGeneration)
 
@@ -93,7 +99,7 @@ endif ()
 
 # KAuth backend plugin
 
-if (NOT "${KAUTH_BACKEND_NAME}" STREQUAL "FAKE")
+if (NOT "${KAUTH_BACKEND_NAME}" STREQUAL "FAKE" AND TARGET Qt5::Widgets)
     set(KAUTH_BACKEND_SRCS ${KAUTH_BACKEND_SRCS})
     # KAuth::AuthBackend is not exported
     add_library(kauth_backend_plugin MODULE ${KAUTH_BACKEND_SRCS} AuthBackend.cpp kauthdebug.cpp)
@@ -109,7 +115,7 @@ endif ()
 
 # KAuth helper plugin
 
-if (NOT "${KAUTH_HELPER_BACKEND_NAME}" STREQUAL "FAKE")
+if (NOT "${KAUTH_HELPER_BACKEND_NAME}" STREQUAL "FAKE" AND TARGET Qt5::Widgets)
     # KAuth::HelperProxy is not exported
     add_library(kauth_helper_plugin MODULE ${KAUTH_HELPER_BACKEND_SRCS} HelperProxy.cpp kauthdebug.cpp)
     target_link_libraries(kauth_helper_plugin PRIVATE ${KAUTH_HELPER_BACKEND_LIBS})
@@ -121,14 +127,6 @@ if (NOT "${KAUTH_HELPER_BACKEND_NAME}" STREQUAL "FAKE")
     )
 endif ()
 
-install(TARGETS KF5Auth EXPORT KF5AuthTargets ${KF5_INSTALL_TARGETS_DEFAULT_ARGS})
-
-install(FILES
-  ${CMAKE_CURRENT_BINARY_DIR}/kauth_export.h
-  ${KAuth_HEADERS}
-  DESTINATION ${KDE_INSTALL_INCLUDEDIR_KF5}/KAuth COMPONENT Devel
-)
-
 if(BUILD_QCH)
     ecm_add_qch(
         KF5Auth_QCH
diff --git a/src/ConfigureChecks.cmake b/src/ConfigureChecks.cmake
index d46761a..03b1142 100644
--- a/src/ConfigureChecks.cmake
+++ b/src/ConfigureChecks.cmake
@@ -61,7 +61,7 @@ if(NOT KAUTH_BACKEND)
     # Case-insensitive
     string(TOUPPER ${KAUTH_BACKEND} KAUTH_BACKEND_UPPER)
     set (KAUTH_BACKEND ${KAUTH_BACKEND_UPPER})
-else(NOT KAUTH_BACKEND)
+elseif(KAUTH_BACKEND AND NOT KAUTH_BUILD_CODEGENERATOR_ONLY)
     # Case-insensitive
     string(TOUPPER ${KAUTH_BACKEND} KAUTH_BACKEND_UPPER)
     set (KAUTH_BACKEND ${KAUTH_BACKEND_UPPER})
@@ -103,10 +103,10 @@ else(NOT KAUTH_BACKEND)
         if (NOT PolkitQt5-1_FOUND)
             message ("WARNING: You chose the PolkitQt5-1 KAuth backend but you don't have PolkitQt5-1 installed.
                       Falling back to Fake backend")
-            set (KAUTH_BACKEND "FAKE")
+            #set (KAUTH_BACKEND "FAKE")
         endif (NOT PolkitQt5-1_FOUND)
     endif (KAUTH_BACKEND STREQUAL "POLKITQT5-1")
-endif(NOT KAUTH_BACKEND)
+endif()
 
 set(KAUTH_BACKEND_NAME ${KAUTH_BACKEND} CACHE STRING "Specifies the KAuth backend to build. Current available options are
                                    PolkitQt, PolkitQt5-1, Fake, Apple. Not setting this variable will build the most
@@ -147,12 +147,14 @@ elseif(KAUTH_BACKEND_NAME STREQUAL "POLKITQT5-1")
         backends/polkit-1/Polkit1Backend.cpp
     )
 
-	set(KAUTH_BACKEND_LIBS ${POLKITQT-1_CORE_LIBRARY} Qt5::DBus Qt5::Widgets)
+    set(KAUTH_BACKEND_LIBS ${POLKITQT-1_CORE_LIBRARY} Qt5::DBus Qt5::Widgets)
 
     # POLKITQT-1_POLICY_FILES_INSTALL_DIR has an absolute pathname, fix that.
-    string(REPLACE ${POLKITQT-1_INSTALL_DIR}
-        ${CMAKE_INSTALL_PREFIX} _KAUTH_POLICY_FILES_INSTALL_DIR
-        ${POLKITQT-1_POLICY_FILES_INSTALL_DIR})
+    if(POLKITQT-1_INSTALL_DIR)
+        string(REPLACE ${POLKITQT-1_INSTALL_DIR}
+            ${CMAKE_INSTALL_PREFIX} _KAUTH_POLICY_FILES_INSTALL_DIR
+            ${POLKITQT-1_POLICY_FILES_INSTALL_DIR})
+    endif()
 
     set(KAUTH_POLICY_FILES_INSTALL_DIR ${_KAUTH_POLICY_FILES_INSTALL_DIR} CACHE STRING
         "Where policy files generated by KAuth will be installed" FORCE)
